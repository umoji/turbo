#!/usr/bin/env roseus

; (when (not (boundp 'LOADED_PR2))
;   (print "dialogue.l: incorrect loading")
;   (quit)
; )
; (when (not LOADED_PR2)
;   (print "dialogue.l: incorrect loading")
;   (quit)
; )

; (load "gesture.l")
; (load "tabletop-pickup.l")

(ros::roseus "voice-detector")
(ros::rate 100)
(ros::advertise "/pro/voice_detector" std_msgs::string 1)
(ros::advertise "/cmd_vel_mux/input/teleop" geometry_msgs::Twist 1)

(defun contain (words strings)
  (when (not (listp words))
    (print "contain: words is not list")
    (print words)
    (return-from contain nil)
  )
  (when (not (listp strings))
    (print "contain: strings is not list")
    (print strings)
    (return-from contain nil)
  )

  (dotimes (i (list-length words))
    (dotimes (j (list-length strings))
      (when (substringp (nth i words) (nth j strings)) (return-from contain t))
    )
  )
)


(defun dialogue (data)
  (when (contain (list "hello" "こんにちは") data)
    (print "TurBo「こんにちは。」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Hello"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "picture" "photo" "写真" "しゃしん") data)
    (print "TurBo「写真を撮りましょう」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Photo"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "drink" "tea" "飲む" "のむ" "お茶" "おちゃ") data)
    (print "TurBo「どうぞ」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Drink"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "dance" "踊" "おど" "ダンス" "だんす") data)
    (print "TurBo「踊ります。」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Dance"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "play" "遊" "あそ") data)
    (print "TurBo「踊ります。」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Dance"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

; --------------------------------------------------------------------------------------------------------

    (when (contain (list "だるま" "ダルマ") data)
    (print "TurBo「だるまさんが転んだ。」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Daruma"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

    (when (contain (list "散歩" "さんぽ" "walk" "歩" "ある") data)
    (print "TurBo「散歩をします。」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Sanpo"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

; --------------------------------------------------------------------------------------------------------

  (when (contain (list "yes" "ok" "いいよ") data)
    (print "TurBo「OK」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "Yes"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "no" "ノー" "ng" "だめ" "ダメ") data)
    (print "TurBo「どうぞ」")
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil "No"))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

; --------------------------------------------------------------------------------------------------------

  (when (contain (list "right" "右" "みぎ") data)
    (print "TurBo「右回転」")
    (setq msg (instance geometry_msgs::Twist :init))
    (send msg :angular :z -0.5)
    (ros::publish "/cmd_vel_mux/input/teleop" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "left" "左" "ひだり") data)
    (print "TurBo「左回転」")
    (setq msg (instance geometry_msgs::Twist :init))
    (send msg :angular :z 0.5)
    (ros::publish "/cmd_vel_mux/input/teleop" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "forword" "straight" "前" "まえ" "直進" "ちょくしん" "すすめ") data)
    (print "TurBo「前進」")
    (setq msg (instance geometry_msgs::Twist :init))
    (send msg :linear :x 0.1)
    (ros::publish "/cmd_vel_mux/input/teleop" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "back" "後ろ" "うしろ" "後退" "こうたい" "もどれ") data)
    (print "TurBo「後退」")
    (setq msg (instance geometry_msgs::Twist :init))
    (send msg :linear :x -0.1)
    (ros::publish "/cmd_vel_mux/input/teleop" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (when (contain (list "回" "まわ" "回転" "かいてん") data)
    (print "TurBo「回れ右」")
    (setq msg (instance geometry_msgs::Twist :init))
    (send msg :angular :z -50)
    (ros::publish "/cmd_vel_mux/input/teleop" msg)
    (unix::sleep 3)
    (return-from dialogue)
  )

  (not (when (contain (list "hello" "こんにちは" "picture" "photo" "写真" "しゃしん"
                               "drink" "tea" "飲む" "のむ" "お茶" "おちゃ"
                               "dance" "踊" "おど" "ダンス" "だんす" "play" "遊" "あそ"
                               "だるま" "ダルマ" "散歩" "さんぽ" "walk" "歩" "ある"
                               "yes" "ok" "いいよ" "no" "ノー" "ng" "だめ" "ダメ"
                               "right" "右" "みぎ" "left" "左" "ひだり"
                               "forword" "straight" "前" "まえ" "直進" "ちょくしん" "すすめ"
                               "back" "後ろ" "うしろ" "後退" "こうたい" "もどれ" "回" "まわ" "回転" "かいてん"
                               ) data)))
    (setq msg (instance std_msgs::string :init))
    (send msg :data (format nil (car data)))
    (ros::ros-info "msg [~A]" (send msg :data))
    (ros::publish "/pro/voice_detector" msg)
    ; (speak "hello")
    (unix::sleep 3)
    ; (send *gesture* :bow)
    ; (reset-pr2 1000)
    (return-from dialogue)
  )


  ; (when (contain (list "play" "Play") data)
  ;   (print "TurBo「遊びましょう。」")
  ;   (setq msg (instance std_msgs::string :init))
  ;   (send msg :data (format nil "Play"))
  ;   (ros::ros-info "msg [~A]" (send msg :data))
  ;   (ros::publish "/pro/voice_detector" msg)
  ;   ; (speak "hello")
  ;   (unix::sleep 3)
  ;   ; (send *gesture* :bow)
  ;   ; (reset-pr2 1000)
  ;   (return-from dialogue)
  ; )


  ; (when (contain (list "sing" "song" "uta" "utatte") data)
  ;     (print "PR2「私はPR2。よろしくお願いします！」")
  ;     (speak-jp "わたしわ ぴーあーるつー")
  ;     (unix::sleep 3)
  ;     (send *gesture* :introduction)
  ;     (speak-jp "よろしくおねがいします")
  ;     (unix::sleep 3)
  ;     (send *gesture* :bow)
  ;     (reset-pr2 2000)
  ;     (return-from dialogue)
  ;   )
  ;   (when (contain (list "趣味" "しゅみ" "何が好き" "好きな物" "好きなもの" "すきなもの") data)
  ;     (print "PR2「私はTwitterが大好きです！」")
  ;     (speak-jp "わたしわついったーがだいすきです")
  ;     (unix::sleep 2)
  ;     (send *gesture* :self-left)
  ;     (unix::sleep 1)
  ;     (reset-pr2 2000)
  ;     (return-from dialogue)
  ;   )
  ; )

  ; (when (contain (list "持って" "もって" "取って" "とって" "下さい" "ください" "欲しい" "ほしい" "頂戴" "ちょうだい") data)
  ;   (when (contain (list "それ" "テーブルの上" "テーブルのうえ") data)
  ;     (print "PR2「テーブルの上の物を持ち上げます。」")
  ;     (speak-jp "てーぶるのうえのものをもちあげます")
  ;     (unix::sleep 2)
  ;     (pickup-nearest)
  ;     (unix::sleep 1)
  ;     (reset-pr2 5000)
  ;     (return-from dialogue)
  ;     )
  ;   (when (contain (list "赤" "あか" "ワンダ" "わんだ") data)
  ;     (print "PR2「赤い物を持ち上げます」")
  ;     (speak-jp "あかいものをもちあげます")
  ;     (unix::sleep 2)
  ;     (pickup-red)
  ;     (unix::sleep 1)
  ;     (reset-pr2 5000)
  ;     (return-from dialogue)
  ;     )
  ;   (when (contain (list "青" "あお" "ジョージア" "じょーじあ") data)
  ;     (print "PR2「青い物を持ち上げます。」")
  ;     (speak-jp "あおいものをもちあげます")
  ;     (unix::sleep 2)
  ;     (pickup-blue)
  ;     (unix::sleep 1)
  ;     (reset-pr2 5000)
  ;     (return-from dialogue)
  ;     )
  ;   )
)